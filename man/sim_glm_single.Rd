% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sim_glm_func.r
\name{sim_glm_single}
\alias{sim_glm_single}
\title{Simulation single level logistic regression model}
\usage{
sim_glm_single(fixed, fixed_param, cov_param, n, data_str, cor_vars = NULL,
  fact_vars = list(NULL), contrasts = NULL, ...)
}
\arguments{
\item{fixed}{One sided formula for fixed effects in the simulation.  To suppress intercept add -1 to formula.}

\item{fixed_param}{Fixed effect parameter values (i.e. beta weights).  Must be same length as fixed.}

\item{cov_param}{List of mean and sd (standard deviation) for fixed effects. Does not include intercept, time, or 
interactions. Must be same order as fixed formula above.}

\item{n}{Cluster sample size.}

\item{data_str}{Type of data. Must be "cross", "long", or "single".}

\item{cor_vars}{A vector of correlations between variables.}

\item{fact_vars}{A nested list of factor, categorical, or ordinal variable specification, 
each list must include numlevels and var_type (must be "lvl1" or "lvl2");
optional specifications are: replace, prob, value.labels.}

\item{contrasts}{An optional list that specifies the contrasts to be used for factor
variables (i.e. those variables with .f or .c). See \code{\link{contrasts}} for 
more detail.}

\item{...}{Not currently used.}
}
\description{
Takes simulation parameters as inputs and returns simulated data.
}
\details{
Simulates data for the simple logistic regression models.  Returns 
a data frame with ID variables, fixed effects, and many other variables
to help when running simulation studies.
}
\examples{
\donttest{
# generating parameters for single level logistic regression
fixed <- ~1 + act + diff + numCourse + act:numCourse
fixed_param <- c(0.2, 1.5, 0.8, 1.2, 1.1)
cov_param <- list(mean = c(0, 0, 0), sd = c(1, 1, 1), var_type = c("single", "single", "single"))
n <- 150
temp.single <- sim_glm_single(fixed = fixed, fixed_param = fixed_param, cov_param = cov_param, 
n = n)
# Fitting regression to obtain parameter estimates
summary(glm(sim_data ~ 1 + act + diff + numCourse + act:numCourse, data = temp.single,
family = "binomial"))

}
}

