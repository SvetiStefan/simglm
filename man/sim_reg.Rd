% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sim_reg.r
\name{sim_reg}
\alias{sim_reg}
\title{Master continuous simulation function.}
\usage{
sim_reg(fixed, random, random3, fixed_param, random_param = list(),
  random_param3 = list(), cov_param, k, n, p, error_var, with_err_gen,
  arima = FALSE, data_str, cor_vars = NULL, fact_vars = list(NULL),
  unbal = FALSE, unbal3 = FALSE, unbalCont = NULL, unbalCont3 = NULL,
  lvl1_err_params = NULL, arima_mod = list(NULL), ...)
}
\arguments{
\item{fixed}{One sided formula for fixed effects in the simulation.  To suppress intercept add -1 to formula.}

\item{random}{One sided formula for random effects in the simulation. Must be a subset of fixed.}

\item{random3}{One sided formula for random effects at third level in the simulation. Must be a subset of fixed
(and likely of random).}

\item{fixed_param}{Fixed effect parameter values (i.e. beta weights).  Must be same length as fixed.}

\item{random_param}{A list of named elements that must contain: 
\itemize{
   \item  random_var = variance of random parameters,
   \item  rand_gen = Name of simulation function for random effects.
}
       Optional elements are:
\itemize{
   \item ther: Theorectial mean and variance from rand_gen,
   \item ther_sim: Simulate mean/variance for standardization purposes,
   \item cor_vars: Correlation between random effects,
   \item ...: Additional parameters needed for rand_gen function.
 }}

\item{random_param3}{A list of named elements that must contain: 
\itemize{
    \item random_var = variance of random parameters,
    \item rand_gen = Name of simulation function for random effects.
}
      Optional elements are:
\itemize{
    \item ther: Theorectial mean and variance from rand_gen,
    \item ther_sim: Simulate mean/variance for standardization purposes,
    \item cor_vars: Correlation between random effects,
    \item ...: Additional parameters needed for rand_gen function.
}}

\item{cov_param}{List of parameters to pass on to continuous covariate 
 simulation. Does not include intercept, time, or 
 interactions. Must be same order as fixed formula above. 
 This list must contain:
 \itemize{
   \item dist_fun = distribution for covariate simulation   
   \item Any additional arguments needed to evaluate R distribution
      function. 
}}

\item{k}{Number of third level clusters.}

\item{n}{Cluster sample size.}

\item{p}{Within cluster sample size.}

\item{error_var}{Scalar of error variance.}

\item{with_err_gen}{Distribution function to pass on to the level one
simulation of errors.}

\item{arima}{TRUE/FALSE flag indicating whether residuals should 
be correlated. If TRUE, must specify a valid model to pass to 
arima.sim. See \code{\link{arima.sim}} for examples.}

\item{data_str}{Type of data. Must be "cross", "long", or "single".}

\item{cor_vars}{A vector of correlations between variables.}

\item{fact_vars}{A nested list of factor, categorical, or ordinal variable specification, 
each list must include numlevels and var_type (must be "lvl1" or "lvl2");
optional specifications are: replace, prob, value.labels.}

\item{unbal}{A vector of sample sizes for the number of observations for each level 2
cluster. Must have same length as level two sample size n. Alternative specification
can be TRUE, which uses additional argument, unbalCont.}

\item{unbal3}{A vector of sample sizes for the number of observations for each level 3
cluster. Must have same length as level two sample size k. Alternative specification
can be TRUE, which uses additional argument, unbalCont3.}

\item{unbalCont}{When unbal = TRUE, this specifies the minimum and maximum level one size,
will be drawn from a random uniform distribution with min and max specified.}

\item{unbalCont3}{When unbal3 = TRUE, this specifies the minimum and maximum level two size,
will be drawn from a random uniform distribution with min and max specified.}

\item{lvl1_err_params}{Additional parameters passed as a list on to the level one error generating function}

\item{arima_mod}{A list indicating the ARIMA model to pass to arima.sim. 
See \code{\link{arima.sim}} for examples.}

\item{...}{Not currently used.}
}
\description{
Takes simulation parameters as inputs and returns simulated data.
}
\details{
Simulated data is useful for classroom demonstrations and to study 
the impacts of assumption violations on parameter estimates, statistical
power, or empirical type I error rates.

This function allows researchers a flexible approach to simulate regression
models, including single level models and cross sectional or longitudinal
linear mixed models (aka. hierarchical linear models or multilevel models).
}
\examples{
\donttest{
# generating parameters for single level regression
fixed <- ~1 + act + diff + numCourse + act:numCourse
fixed_param <- c(2, 4, 1, 3.5, 2)
cov_param <- list(dist_fun = c('rnorm', 'rnorm', 'rnorm'), 
   mean = c(0, 0, 0), sd = c(4, 3, 3), 
   var_type = c("single", "single", "single"))
n <- 150
error_var <- 3
with_err_gen <- 'rnorm'
temp.single <- sim_reg(fixed = fixed, fixed_param = fixed_param, cov_param = cov_param, 
n = n, error_var = error_var, with_err_gen = with_err_gen, data_str = "single")
# Fitting regression to obtain parameter estimates
summary(lm(sim_data ~ 1 + act + diff + numCourse + act:numCourse, data = temp.single))

# Longitudinal linear mixed model example
fixed <- ~1 + time + diff + act + time:act
random <- ~1 + time + diff
fixed_param <- c(4, 2, 6, 2.3, 7)
random_param <- list(random_var = c(7, 4, 2), rand_gen = 'rnorm')
cov_param <- list(dist_fun = c('rnorm', 'rnorm'), mean = c(0, 0), 
  sd = c(1.5, 4), var_type = c("lvl1", "lvl2"))
n <- 150
p <- 30
error_var <- 4
with_err_gen <- 'rnorm'
data_str <- "long"
temp.long <- sim_reg(fixed, random, random3 = NULL, fixed_param, random_param, random_param3 = NULL,
 cov_param, k = NULL, n, p, error_var, with_err_gen, data_str = data_str)

## fitting lmer model
library(lme4)
lmer(sim_data ~ 1 + time + diff + act + time:act + (1 + time + diff | clustID), 
data = temp.long)

# Three level example
fixed <- ~1 + time + diff + act + actClust + time:act
random <- ~1 + time + diff
random3 <- ~ 1 + time
fixed_param <- c(4, 2, 6, 2.3, 7, 0)
random_param <- list(random_var = c(7, 4, 2), rand_gen = 'rnorm')
random_param3 <- list(random_var = c(4, 2), rand_gen = 'rnorm')
cov_param <- list(dist_fun = c('rnorm', 'rnorm', 'rnorm'), 
     mean = c(0, 0, 0), sd = c(1.5, 4, 2), 
     var_type = c("lvl1", "lvl2", "lvl3"))
k <- 10
n <- 15
p <- 10
error_var <- 4
with_err_gen <- 'rnorm'
data_str <- "long"
temp.three <- sim_reg(fixed, random, random3, fixed_param, random_param, 
random_param3, cov_param, k,n, p, error_var, with_err_gen, data_str = data_str)

library(lme4)
lmer(sim_data ~ 1 + time + diff + act + actClust + time:act + (1 + time + diff | clustID) +  
(1 | clust3ID), data = temp.three)

}
}

